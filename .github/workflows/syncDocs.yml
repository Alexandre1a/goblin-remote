name: Sync Package Documentation

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      package_name:
        description: "Specific package to update (leave empty for all)"
        required: false
        type: string
  push:
    paths:
      - "sources.yml"

jobs:
  sync-documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Set up environment
        id: setup
        run: |
          mkdir -p packages
          if [ -n "${{ github.event.inputs.package_name }}" ]; then
            echo "PACKAGE_FILTER=${{ github.event.inputs.package_name }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_FILTER=.*" >> $GITHUB_ENV
          fi

      - name: Extract packages and repo URLs
        id: extract
        run: |
          PACKAGES=$(yq e '.packages[] | select(.name | match(env(PACKAGE_FILTER))) | .name' sources.yml | tr '\n' ' ')
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV

          for pkg in $PACKAGES; do
            REPO_URL=$(yq e ".packages[] | select(.name == \"$pkg\") | .repo_url" sources.yml)

            if [ "$REPO_URL" = "null" ]; then
              BASE_URL=$(yq e ".packages[] | select(.name == \"$pkg\") | .base_url" sources.yml)
              if [[ $BASE_URL == *"github.com"* ]]; then
                OWNER=$(echo "$BASE_URL" | awk -F/ '{print $4}')
                REPO=$(echo "$BASE_URL" | awk -F/ '{print $5}')
                REPO_URL="https://github.com/$OWNER/$REPO"
              fi
            fi

            if [ -n "$REPO_URL" ] && [ "$REPO_URL" != "null" ]; then
              echo "${pkg}_REPO_URL=$REPO_URL" >> $GITHUB_ENV
            fi
          done

      - name: Sync documentation
        run: |
          for pkg in $PACKAGES; do
            pkg_repo_var="${pkg}_REPO_URL"
            REPO_URL="${!pkg_repo_var}"

            if [ -z "$REPO_URL" ]; then
              echo "Skipping $pkg - No repo URL"
              continue
            fi

            OWNER=$(echo "$REPO_URL" | awk -F/ '{print $4}')
            REPO=$(echo "$REPO_URL" | awk -F/ '{print $5}')
            mkdir -p "packages/$pkg"

            # Try main and master branches
            if curl -sLf "https://raw.githubusercontent.com/$OWNER/$REPO/main/README.md" -o "packages/$pkg/README.md" ||
               curl -sLf "https://raw.githubusercontent.com/$OWNER/$REPO/master/README.md" -o "packages/$pkg/README.md"; then
              sed -i "1i<!-- Synced from $REPO_URL ($(date)) -->\n" "packages/$pkg/README.md"
              echo "Synced $pkg"
            else
              echo "Failed to download README for $pkg"
            fi
          done

      - name: Commit changes
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add packages/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Docs sync: $(date +'%Y-%m-%d')"
            git push
          else
            echo "No changes"
          fi

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write
