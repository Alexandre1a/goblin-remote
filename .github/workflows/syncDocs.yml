name: Sync Package Documentation

on:
  # Run the workflow daily at midnight
  schedule:
    - cron: "0 0 * * *"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      package_name:
        description: "Specific package to update (leave empty for all)"
        required: false
        type: string

  # Run when the sources.yml file is updated
  push:
    paths:
      - "sources.yml"

jobs:
  sync-documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout goblin-remote repository
        uses: actions/checkout@v4

      - name: Install yq for YAML processing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Set up environment
        id: setup
        run: |
          mkdir -p packages

          # If a specific package was requested, filter for just that one
          if [ -n "${{ github.event.inputs.package_name }}" ]; then
            echo "PACKAGE_FILTER=${{ github.event.inputs.package_name }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_FILTER=.*" >> $GITHUB_ENV
          fi

      - name: Extract packages and repo URLs
        id: extract
        run: |
          # Extract package names and repo URLs (or base URLs to derive repos)
          PACKAGES=$(yq e '.packages[] | select(.name | match(env(PACKAGE_FILTER))) | .name' sources.yml)
          echo "Found packages to sync: $PACKAGES"
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV

          # For each package, either use repo_url or extract from base_url
          for pkg in $PACKAGES; do
            # Try to get explicit repo_url first
            REPO_URL=$(yq e ".packages[] | select(.name == \"$pkg\") | .repo_url" sources.yml)

            # If repo_url is null, extract from base_url
            if [ "$REPO_URL" = "null" ]; then
              BASE_URL=$(yq e ".packages[] | select(.name == \"$pkg\") | .base_url" sources.yml)

              # Extract GitHub owner and repo from URLs like:
              # https://github.com/Alexandre1a/GoSH/releases/download/v1.0.0/
              if [[ $BASE_URL == *"github.com"* ]]; then
                OWNER=$(echo $BASE_URL | sed -n 's/.*github\.com\/\([^\/]*\)\/.*/\1/p')
                REPO=$(echo $BASE_URL | sed -n 's/.*github\.com\/[^\/]*\/\([^\/]*\)\/.*/\1/p')
                REPO_URL="https://github.com/$OWNER/$REPO"
              fi
            fi

            if [ -n "$REPO_URL" ] && [ "$REPO_URL" != "null" ]; then
              echo "${pkg}_REPO_URL=$REPO_URL" >> $GITHUB_ENV
            else
              echo "Warning: Could not determine repository URL for $pkg"
            fi
          done

      - name: Sync documentation for each package
        run: |
          for pkg in $PACKAGES; do
            pkg_repo_var="${pkg}_REPO_URL"
            REPO_URL="${!pkg_repo_var}"

            if [ -z "$REPO_URL" ]; then
              echo "Skipping $pkg - No repository URL found"
              continue
            fi

            echo "Processing $pkg from $REPO_URL"
            mkdir -p "packages/$pkg"

            # Try to download README from main branch first, fallback to master
            if curl -s -f "$REPO_URL/refs/heads/main/README.md" -o "packages/$pkg/README.md"; then
              echo "Downloaded README from main branch for $pkg"
            elif curl -s -f "$REPO_URL/refs/heads/master/README.md" -o "packages/$pkg/README.md"; then
              echo "Downloaded README from master branch for $pkg"
            else
              echo "Could not find README for $pkg in main or master branches"
              continue
            fi

            # Add header to the README
            sed -i "1i<!-- This README was automatically synced from $REPO_URL on $(date +'%Y-%m-%d %H:%M:%S UTC') -->\n\n" "packages/$pkg/README.md"

            echo "Successfully synced documentation for $pkg"
          done

      - name: Commit changes if any
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"

          if [[ -n $(git status -s packages/) ]]; then
            git add packages/
            git commit -m "Sync package documentation ($(date +'%Y-%m-%d'))"
            git push
          else
            echo "No documentation changes detected"
          fi
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write # Permet de manipuler le contenu du repo
  issues: write # Permet de créer des issues, si nécessaire pour le release
  pull-requests: write # Autorise la gestion des PRs
  actions: write # Permet de gérer les workflows
  pages: write # Si tu utilises GitHub Pages
  discussions: write # Si tu utilises Discussions
